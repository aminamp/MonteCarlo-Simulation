package monCarlo;

/**
 * Handle to core calculations of MonteCarlo Simulation 
 * 
 * @author Amin
 *
 */

import java.util.*;


/**
 * Utility Class to implement the core operations of Monte Carlo simulation
 * @author Amin
 *
 */
public class MonCarloUtil {

	public void run(PortfolioType portfolio, int simulations, int timePeriod, double inflation) {
		
		//generate a random number to be used for as a random rate in Monte Carlo simulation
		Random randRate = new Random();
		
		//save the value at the end of year 20 after each round of simulation 
		List<Double> results = new ArrayList<>();
		
		//calculate the profit and money returned
		for( int i = 0; i < simulations; i++ ) {
			double balance = portfolio.getInitialMoney();
			
			for( int j = 0; j < timePeriod; j++ ){
				
				//we have to adjust the value generated by random generator to have given mean and given standard deviation
				double rate = randRate.nextGaussian() * portfolio.getRiskSD() + portfolio.getReturnMean();
				balance = balance * ( 1 + rate/100 );			
			}
			
			//apply the effect of inflation to it and add it to results array
			results.add( balance/Math.pow(1+inflation/100,  timePeriod) );
		}
		
		Collections.sort(results);
		
		System.out.println("Portfolio Type: " + portfolio.getStrategy());
		System.out.println("Median: " + results.get(results.size()/2) );
		System.out.println("Best 10%: " + results.get(results.size()/10*9) );
		System.out.println("Worst 10%: " + results.get(results.size()/10)  );
		
	}	

}